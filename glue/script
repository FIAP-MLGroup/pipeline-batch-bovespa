import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality
import gs_derived

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""

# Script generated for node Amazon S3
AmazonS3_node1753656616749 = glueContext.create_dynamic_frame.from_options(format_options={}, connection_type="s3", format="parquet", connection_options={"paths": ["s3://b3-tech-challenge-raw/raw-data/"], "recurse": True}, transformation_ctx="AmazonS3_node1753656616749")

# Script generated for node Derived Column 1
DerivedColumn1_node1753657512999 = AmazonS3_node1753656616749.gs_derived(colName="part", expr="CAST(REGEXP_REPLACE(part, ',', '.') AS DOUBLE )")

# Script generated for node Derived Column 2
DerivedColumn2_node1753657747036 = DerivedColumn1_node1753657512999.gs_derived(colName="theoricalQty", expr="   REGEXP_REPLACE(theoricalQty, '\\\\.', '') AS BIGINT")

# Script generated for node Change Schema
ChangeSchema_node1753658250428 = ApplyMapping.apply(frame=DerivedColumn2_node1753657747036, mappings=[("cod", "string", "codigo", "string"), ("asset", "string", "acao", "string"), ("type", "string", "tipo", "string"), ("part", "double", "participacao", "double"), ("theoricalQty", "string", "qtde_teorica", "bigint")], transformation_ctx="ChangeSchema_node1753658250428")

# Script generated for node Amazon S3
EvaluateDataQuality().process_rows(frame=ChangeSchema_node1753658250428, ruleset=DEFAULT_DATA_QUALITY_RULESET, publishing_options={"dataQualityEvaluationContext": "EvaluateDataQuality_node1753656607264", "enableDataQualityResultsPublishing": True}, additional_options={"dataQualityResultsPublishing.strategy": "BEST_EFFORT", "observations.scope": "ALL"})
AmazonS3_node1753658686050 = glueContext.getSink(path="s3://b3-tech-challenge-raw/refined-data/", connection_type="s3", updateBehavior="UPDATE_IN_DATABASE", partitionKeys=[], enableUpdateCatalog=True, transformation_ctx="AmazonS3_node1753658686050")
AmazonS3_node1753658686050.setCatalogInfo(catalogDatabase="b3-tech-challenge_db",catalogTableName="b3-tech-challenge-etl")
AmazonS3_node1753658686050.setFormat("glueparquet", compression="snappy")
AmazonS3_node1753658686050.writeFrame(ChangeSchema_node1753658250428)
job.commit()